apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: archon-keycloak
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/component: keycloak
spec:
  replicas: 2
  revisionHistoryLimit: 10
  podManagementPolicy: Parallel
  serviceName: {{ .Release.Name }}-keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/component: keycloak
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        app.kubernetes.io/part-of: {{ .Release.Name }}
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: {{ .Values.azureIdentity.name | quote }}
      initContainers:
        - name: mount-az-secrets
          image: {{ .Values.registry }}/archon/pipeline:latest
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
          command:
            - python3
          args: 
            - -c
            - |
                import os
                from azure.identity import ManagedIdentityCredential
                
                managed_identity_client_id = {{ .Values.azureIdentity.clientId | quote}}
                cred = ManagedIdentityCredential(client_id=managed_identity_client_id)
                access_token = cred.get_token("https://ossrdbms-aad.database.windows.net/.default").token
                with open('/secrets/postgresql-access-token', 'w') as f:
                    f.write(access_token)
                print("Access token written to /secrets/postgresql-access-token")
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
        - name: prepare-write-dirs
          image: {{.Values.image}}
          imagePullPolicy: Always
          command:
            - /bin/sh
          args:
            - -ec
            - |
              echo "Copying writable dirs to empty dir"
              # In order to not break the application functionality we need to make some
              # directories writable, so we need to copy it to an empty dir volume
              cp -r /opt/keycloak/lib/quarkus /emptydir/app-quarkus-dir
              cp -r /opt/keycloak/data /emptydir/app-data-dir
              cp -r /opt/keycloak/conf /emptydir/app-conf-dir
              cp -r /opt/keycloak/providers /emptydir/app-providers-dir
              echo "Copy operation completed"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          # resources:
          #   limits:
          #     cpu: "2"
          #     ephemeral-storage: 2Gi
          #     memory: 4Gi
          #   requests:
          #     cpu: "1"
          #     ephemeral-storage: 50Mi
          #     memory: 2Gi
          volumeMounts:
           - name: empty-dir
             mountPath: /emptydir
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: {{ .Release.Name }}
                    app.kubernetes.io/name: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      enableServiceLinks: true
      # TODO: auto realm creation and hardening of main realm.....
      containers:
        - name: keycloak
          # TODO: fix this versioning lol
          image: {{ .Values.registry }}/keycloak/keycloak:latest
          command:
            - sh
          args:
            - -ec
            - |
              export KC_DB_PASSWORD=$(cat /secrets/postgresql-access-token)
              /opt/keycloak/bin/kc.sh start \
                --spi-password-hashing-pbkdf2-sha512-max-padding-length=14 \
                --log-level=INFO,org.keycloak.common.crypto:TRACE,org.keycloak.crypto:TRACE \
                --optimized \
                -Djgroups.dns.query={{ .Release.Name }}-keycloak-headless.{{ .Release.Namespace }}.svc.cluster.local 
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-keycloak-init
                  key: password
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-keycloak-init
                  key: username
            - name: KC_DB_USERNAME
              value: {{ .Values.azureIdentity.name | quote }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-keycloak-env-vars
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          ports:
            - name: http
              containerPort: 8080
              hostPort: 8080
              protocol: TCP
            - name: management
              containerPort: 9000
            - name: discovery
              containerPort: 7800
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              port: management
              path: /health
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              port: management
              path: /health/ready
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /keycloak
              subPath: app-volume-dir
            - name: empty-dir
              mountPath: /opt/keycloak/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/keycloak/lib/quarkus
              subPath: app-quarkus-dir
            - name: empty-dir
              mountPath: /opt/keycloak/data
              subPath: app-data-dir
            - name: empty-dir
              mountPath: /opt/keycloak/providers
              subPath: app-providers-dir
            - name: secret-volume
              mountPath: /secrets
        - name: refresh-az-token
          image: {{ .Values.registry }}/archon/pipeline:latest
          command:
            - python3
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
          args:
            - -c
            - |
                print("Starting token refresh loop")
                import time
                from azure.identity import ManagedIdentityCredential

                managed_identity_client_id = {{ .Values.azureIdentity.clientId | quote }}
                cred = ManagedIdentityCredential(client_id=managed_identity_client_id)
                while True:
                    token = cred.get_token("https://ossrdbms-aad.database.windows.net/.default").token
                    with open('/secrets/postgresql-access-token', 'w') as f:
                        f.write(token)
                    print("Token refreshed")
                    time.sleep(1800)  # refresh every 30 minutes
                
                print("WARNING: Token refresh loop ended unexpectedly!")
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: secret-volume
          emptyDir: {}
